services:

  ### --- VPN & Download Stack --- ###

  vpn:
    image: haugene/transmission-openvpn
    container_name: vpn
    env_file: .env
    cap_add:
      - NET_ADMIN
    security_opt:
      - label=disable
    devices:
      - /dev/net/tun
    environment:
      - OPENVPN_PROVIDER=${OPENVPN_PROVIDER}
      - OPENVPN_CONFIG=${OPENVPN_CONFIG}
      - LOCAL_NETWORK=${LOCAL_NETWORK}
      - KILL_SWITCH=on
      - UFW_ALLOW_GW_NET=true
      - VPN_DISABLE_IPV6=true
    ports:
      - 9091:9091     # Transmission Web UI
      - 8112:8112     # Deluge Web UI
      - 58846:58846   # Deluge RPC
      - 8081:8081     # Extra optional
    volumes:
      - ${ROOT}/config/vpn:/config/vpn
      - /etc/localtime:/etc/localtime:ro
    restart: unless-stopped

  deluge:
    image: linuxserver/deluge:latest
    container_name: deluge
    network_mode: service:vpn
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${ROOT}/config/deluge:/config
      - /mnt/media/extra/downloads:/downloads
      - /mnt/media/extra/downloads/torrent-blackhole:/downloads/torrent-blackhole
    restart: unless-stopped
    depends_on:
      - vpn

  jackett:
    image: linuxserver/jackett:latest
    container_name: jackett
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    ports:
      - 9117:9117
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${ROOT}/downloads/torrent-blackhole:/downloads
      - ${ROOT}/config/jackett:/config
    restart: unless-stopped

  ### --- Media Server --- ###

  plex-server:
    image: plexinc/pms-docker:latest
    container_name: plex-server
    network_mode: host
    environment:
      - TZ=${TZ}
      - PLEX_CLAIM=${PLEX_CLAIM}
    volumes:
      - ${ROOT}/config/plex/db:/config
      - ${ROOT}/config/plex/transcode:/transcode
      - /mnt/media:/mnt/media
      - /mnt/media/extra:/mnt/media/extra
    devices:
      - /dev/dri:/dev/dri
    restart: unless-stopped

  radarr:
    image: linuxserver/radarr:latest
    container_name: radarr
    network_mode: host
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${ROOT}/config/radarr:/config
      - /mnt/media/movies:/movies
      - /mnt/media/extra:/mnt/media/extra
      - /mnt/media/extra/downloads:/downloads
    restart: unless-stopped

  sonarr:
    image: linuxserver/sonarr:latest
    container_name: sonarr
    network_mode: host
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${ROOT}/config/sonarr:/config
      - /mnt/media/tv:/tv
      - /mnt/media/extra:/mnt/media/extra
      - /mnt/media/extra/downloads:/downloads
    restart: unless-stopped

  bazarr:
    image: linuxserver/bazarr:latest
    container_name: bazarr
    network_mode: host
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${ROOT}/config/bazarr:/config
      - /mnt/media/movies:/movies
      - /mnt/media/tv:/tv
    restart: unless-stopped

  ### --- Web Reverse Proxy (NGINX) --- ###

  nginx:
    image: nginx:alpine
    container_name: nginx-proxy
    network_mode: host
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${ROOT}/proxy/logs:/var/log/nginx
      - ${ROOT}/config/nginx/Plexconf:/etc/nginx/conf.d
      - ${ROOT}/config/nginx/SSL_certificate:/etc/nginx/SSL_certificate
      - ${ROOT}/config/nginx/letsencrypt/live:/etc/letsencrypt/live
      - ${ROOT}/config/nginx/letsencrypt/archive:/etc/letsencrypt/archive
      - ${ROOT}/config/nginx/letsencrypt/ssl-dhparams.pem:/etc/letsencrypt/ssl-dhparams.pem
    restart: unless-stopped

  monitor:
    build:
      context: ${ROOT}/scripts
      dockerfile: Dockerfile
    env_file:
      - ${ROOT}/.env
    volumes:
      - ${ROOT}/scripts/core:/app
      - ${ROOT}/config/deluge:/app/config/deluge
      #config/deluge
      - ${ROOT}/scripts/discord:/app/discord
      - ${ROOT}/scripts/monitor/alerts:/app/alerts
      - ${ROOT}/scripts/monitor/repair:/app/repair
      #      - ${ROOT}/scripts/monitor/config:/app/config
      - ${ROOT}/config/plex/transcode/Transcode:/app/Transcode
      - /mnt/data:/mnt/data
      - /var/run/docker.sock:/var/run/docker.sock
      - /mnt/media:/mnt/media
      - /mnt/media/extra:/mnt/media/extra
    command: ["python3", "/app/monitor_loop.py"]
    network_mode: host
    restart: unless-stopped
  
  discord-bot:
    build:
      context: ${ROOT}/scripts
      dockerfile: Dockerfile
    env_file:
      - ${ROOT}/.env
    volumes:  
      - /mnt/data:/mnt/data
      - ${ROOT}/scripts/core:/app/core
      - ${ROOT}/scripts/discord:/app/discord
      - ${ROOT}/scripts/health:/app/health
      - ${ROOT}/scripts/monitor:/app/monitor
      - ${ROOT}/scripts/monitor/alerts:/app/alerts
      - ${ROOT}/scripts/monitor/repair:/app/repair
      - ${ROOT}/scripts/addmedia:/app/addmedia
      - ${ROOT}/scripts/adduser:/app/adduser
      - ${ROOT}/scripts/requirements.txt:/app/requirements.txt
      - /var/run/docker.sock:/var/run/docker.sock
    command: ["python3", "/app/discord/discord_listener.py"]
    restart: unless-stopped
    network_mode: host


networks:
  monitoring:
    driver: bridge

volumes:
  prometheus-data:

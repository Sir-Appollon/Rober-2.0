services:

  ### --- VPN & Download Stack --- ###

  vpn:
    image: haugene/transmission-openvpn
    container_name: vpn
    env_file: .env
    cap_add:
      - NET_ADMIN
    security_opt:
      - label=disable
    devices:
      - /dev/net/tun
    environment:
      - OPENVPN_PROVIDER=${OPENVPN_PROVIDER}
      - OPENVPN_CONFIG=${OPENVPN_CONFIG}
      - LOCAL_NETWORK=${LOCAL_NETWORK}
      - KILL_SWITCH=on
      - UFW_ALLOW_GW_NET=true
      - VPN_DISABLE_IPV6=true
    ports:
      - 9091:9091 # Transmission Web UI
      - 8112:8112 # Deluge Web UI
      - 58846:58846 # Deluge RPC
    volumes:
      - ./config/vpn:/config/vpn
      - /etc/localtime:/etc/localtime:ro
    restart: unless-stopped

  deluge:
    image: linuxserver/deluge:latest
    container_name: deluge
    network_mode: service:vpn
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${ROOT}/config/deluge:/config
      - ${ROOT}/scripts:/scripts
      - /mnt/media/extra/downloads:/downloads
      - /mnt/media/extra/downloads/torrent-blackhole:/downloads/torrent-blackhole
    # depends_on:
    #   - vpn
    restart: always

  script-monitoring:
    build: ./scripts
    container_name: script-monitoring
    command: python deluge_control.py
    network_mode: service:vpn
    depends_on:
      - vpn

  jackett:
    image: linuxserver/jackett:latest
    container_name: jackett
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    ports:
      - 9117:9117
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${ROOT}/downloads/torrent-blackhole:/downloads
      - ${ROOT}/config/jackett:/config
    restart: unless-stopped

  ### --- Media Server --- ###

  plex-server:
    image: plexinc/pms-docker:latest
    container_name: plex-server
    network_mode: host
    environment:
      - TZ=${TZ}
      - PLEX_CLAIM=${PLEX_CLAIM}
    volumes:
      - ${ROOT}/config/plex/db:/config
      - ${ROOT}/config/plex/transcode:/transcode
      - /mnt/media:/mnt/media
      - /mnt/media/extra:/mnt/media/extra
    devices:
      - /dev/dri:/dev/dri
    restart: unless-stopped

  radarr:
    image: linuxserver/radarr:latest
    container_name: radarr
    network_mode: host
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${ROOT}/config/radarr:/config
      - /mnt/media/movies:/movies
      - /mnt/media/extra:/mnt/media/extra
      - /mnt/media/extra/downloads:/downloads
    restart: unless-stopped

  sonarr:
    image: linuxserver/sonarr:latest
    container_name: sonarr
    network_mode: host
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${ROOT}/config/sonarr:/config
      - /mnt/media/tv:/tv
      - /mnt/media/extra:/mnt/media/extra
      - /mnt/media/extra/downloads:/downloads
    restart: unless-stopped

  bazarr:
    image: linuxserver/bazarr:latest
    container_name: bazarr
    network_mode: host
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${ROOT}/config/bazarr:/config
      - /mnt/media/movies:/movies
      - /mnt/media/tv:/tv
    restart: unless-stopped

  ### --- Web Reverse Proxy (NGINX) --- ###

  nginx:
    image: nginx:alpine
    container_name: nginx-proxy
    network_mode: host
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${ROOT}/proxy/logs:/var/log/nginx
      - ${ROOT}/config/nginx/Plexconf:/etc/nginx/conf.d
      - ${ROOT}/config/nginx/SSL_certificate:/etc/nginx/SSL_certificate
      - ${ROOT}/config/nginx/letsencrypt/live:/etc/letsencrypt/live
      - ${ROOT}/config/nginx/letsencrypt/archive:/etc/letsencrypt/archive
      - ${ROOT}/config/nginx/letsencrypt/ssl-dhparams.pem:/etc/letsencrypt/ssl-dhparams.pem
    restart: unless-stopped

  ### --- Monitoring Stack --- ###

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ${ROOT}/config/grafana:/var/lib/grafana
    networks:
      - monitoring
    restart: unless-stopped

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ${ROOT}/config/prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - monitoring

  plex-exporter:
    image: ghcr.io/jsclayton/prometheus-plex-exporter
    container_name: plex-exporter
    restart: unless-stopped
    environment:
      - PLEX_TOKEN=${PLEX_TOKEN}
      - PLEX_SERVER=${PLEX_SERVER}
    ports:
      - "9000:9000"
    networks:
      - monitoring

  node_exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: node_exporter
    command:
      - '--path.rootfs=/host'
    networks:
      - monitoring
    pid: host
    ports:
      - "9100:9100"
    restart: unless-stopped
    volumes:
      - '/:/host:ro,rslave'

  # health:
  #   build:
  #     context: ./scripts
  #     dockerfile: Dockerfile
  #   env_file:
  #     - ${ROOT}/.env
  #   network_mode: host
  #   volumes:
  #     - ${ROOT}/scripts:/app
  #     - /mnt/data:/mnt/data
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   restart: unless-stopped
  #   command: [ "sh", "-c", "while true; do python Health.py; sleep 300; done" ]

  health:
    build:
      context: ./scripts
      dockerfile: Dockerfile
    volumes:
      - ${ROOT}/scripts:/app
      - ${ROOT}/.env:/app/.env
      - /mnt/data:/mnt/data
    network_mode: host
    command: ["sh", "-c", "python3 /app/Health.py"]



networks:
  monitoring:
    driver: bridge

volumes:
  prometheus-data:
